name: Build and publish

on:
  workflow_dispatch:
    inputs:
      util-linux-version:
        required: true
        type: string
      beta:
        required: true
        type: boolean
      dry_run:
        required: true
        type: boolean

jobs:
  select-tag:
    name: Select Tag
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.determine-version.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine next version
        id: determine-version
        run: |
          UTIL_LINUX_VERSION="${{ inputs.util-linux-version }}"

          # Get all existing tags for this util-linux version
          EXISTING_TAGS=$(git tag -l "${UTIL_LINUX_VERSION}.*" | sort -V)

          if [ -z "$EXISTING_TAGS" ]; then
            # No existing tags for this version, start with .0
            NEXT_VERSION="${UTIL_LINUX_VERSION}.0"
          else
            # Find the highest subpatch number
            HIGHEST_TAG=$(echo "$EXISTING_TAGS" | tail -n 1)
            CURRENT_SUBPATCH=$(echo "$HIGHEST_TAG" | sed "s/${UTIL_LINUX_VERSION}\.//" | sed 's/-.*//')
            NEXT_SUBPATCH=$((CURRENT_SUBPATCH + 1))
            NEXT_VERSION="${UTIL_LINUX_VERSION}.${NEXT_SUBPATCH}"
          fi

          echo "Next version will be: $NEXT_VERSION"
          echo "version=$NEXT_VERSION" >> $GITHUB_OUTPUT

  build:
    name: Build
    needs: select-tag
    permissions:
      contents: read
      packages: write
    uses: ./.github/workflows/build.yml
    with:
      version: ${{ inputs.util-linux-version }}

  publish:
    name: Publish
    needs: [select-tag, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: getopt
          path: .

      - name: Release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v2
        with:
          files: getopt
          tag_name: ${{ needs.select-tag.outputs.version }}
          generate_release_notes: true
          prerelease: ${{ inputs.beta }}